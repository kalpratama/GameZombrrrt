# Nama workflow yang akan muncul di tab Actions
name: CI-Inspection with SonarCloud

# Memicu workflow pada push ke 'main' atau pada Pull Request yang menargetkan 'main'
on:
  push:
    branches:
      - main
      - nizar-inspection # Ditambahkan agar Anda bisa menguji langsung di branch Anda
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  build_and_analyze: # Nama job diubah agar lebih deskriptif
    name: Build and Analyze with SonarCloud
    runs-on: windows-latest
    steps:
      # Langkah 1: Checkout kode
      # fetch-depth: 0 sangat penting agar SonarCloud bisa menganalisis riwayat commit
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Langkah 2 (FIXED): Menyiapkan lingkungan .NET SDK yang diperlukan untuk C#
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x' # Versi .NET yang umum untuk Unity modern

      # Langkah 3: (Opsional tapi direkomendasikan) Cache folder Library Unity untuk mempercepat build
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Langkah 4 (FIXED): Generate file .sln dengan parameter yang lebih aman
      - name: Generate C# Solution File
        uses: game-ci/unity-builder@v4
        with:
          # PENTING: Pastikan versi Unity ini sudah benar!
          unityVersion: 2022.3.20f1
          targetPlatform: StandaloneLinux64
          # FIX: Menambahkan -batchmode dan -nographics agar stabil di server
          customParameters: -executeMethod UnityEditor.SyncVS.SyncSolution -quit -batchmode -nographics
        env:
          # PENTING: Jika menggunakan Unity Pro, secret ini wajib ada. Jika pakai Personal, hapus blok 'env:' ini.
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      # Langkah 5: Cache untuk paket dan tool SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Langkah 6: Install SonarScanner for .NET jika belum ada di cache
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Langkah 7 (FIXED): Jalankan Analisis dengan env dan perintah yang benar
      - name: Build and Analyze
        env:
          # FIX: Menambahkan GITHUB_TOKEN agar SonarCloud bisa update Pull Request
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Mulai proses analisis
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"kalpratama_GameZombrrrt" /o:"kalpratama" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

          # FIX: Menambahkan 'dotnet restore' sebelum build
          dotnet restore GameZombrrrt.sln
          
          # Build project. Pastikan nama file .sln sudah benar
          dotnet build GameZombrrrt.sln --no-incremental

          # Akhiri proses analisis
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
